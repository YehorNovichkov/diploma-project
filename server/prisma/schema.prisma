// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String?  @unique
  name       String
  surname    String
  patronymic String
  password   String?
  Student    Student?
  Teacher    Teacher?
  Parent     Parent?
  Admin      Admin?
}

model Student {
  id                 String               @id @default(uuid())
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @unique
  Class              Class?               @relation(fields: [classId], references: [id])
  classId            Int?
  parent             Parent               @relation(fields: [parentId], references: [id])
  parentId           String
  StudentsTaskAnswer StudentsTaskAnswer[]
}

model Teacher {
  id       String    @id @default(uuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  Class    Class[]
  subjects Subject[]
}

model Parent {
  id      String    @id @default(uuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String    @unique
  Student Student[]
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Class {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
  teacher  Teacher   @relation(fields: [userId], references: [id])
  userId   String
  subject  Subject[]
  Task     Task[]
  Test     Test[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String
  class    Class[]
  teachers Teacher[]
  Task     Task[]
  Test     Test[]
}

model Task {
  id                 Int                  @id @default(autoincrement())
  created_at         DateTime             @default(now())
  name               String
  description        String
  deadline           DateTime
  files              String[]
  answerTypes        AnswerType[]
  subject            Subject              @relation(fields: [subjectId], references: [id])
  subjectId          Int
  class              Class                @relation(fields: [classId], references: [id])
  classId            Int
  StudentsTaskAnswer StudentsTaskAnswer[]
}

enum AnswerType {
  TEXT
  FILE
}

model StudentsTaskAnswer {
  id        Int     @id @default(autoincrement())
  text      String?
  file      String?
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  task      Task    @relation(fields: [taskId], references: [id])
  taskId    Int
}

model Test {
  id          Int        @id @default(autoincrement())
  created_at  DateTime   @default(now())
  name        String
  description String
  deadline    DateTime
  subject     Subject    @relation(fields: [subjectId], references: [id])
  subjectId   Int
  class       Class      @relation(fields: [classId], references: [id])
  classId     Int
  questions   Question[]
}

model Question {
  id           Int      @id @default(autoincrement())
  text         String
  file         String?
  answers      Answer[]
  manualAnswer String?
  test         Test     @relation(fields: [testId], references: [id])
  testId       Int
}

model Answer {
  id         Int      @id @default(autoincrement())
  text       String
  file       String?
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}
