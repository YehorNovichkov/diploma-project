generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String?              @unique
  name               String
  surname            String
  patronymic         String
  passwordHash       String?
  roles              String[]
  // Student fields
  classId            Int?
  class              Class?               @relation(fields: [classId], references: [id])
  parentId           String?
  parent             User?                @relation("ParentToChildren", fields: [parentId], references: [id])
  TaskAnswer         TaskAnswer[]
  // Parent fields
  children           User[]               @relation("ParentToChildren")
  // Comments fields
  TaskAnswerComments TaskAnswerComments[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String
  students User[]
  tasks    Task[]
  tests    Test[]
}

model Subject {
  id    Int    @id @default(autoincrement())
  name  String
  tasks Task[]
  tests Test[]
}

model Task {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  name        String
  description String
  deadline    DateTime
  filesCount  Int          @default(0)
  subject     Subject      @relation(fields: [subjectId], references: [id])
  subjectId   Int
  class       Class        @relation(fields: [classId], references: [id])
  classId     Int
  taskAnswers TaskAnswer[]

  @@index([subjectId])
  @@index([classId])
}

model TaskAnswer {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  text               String
  filesCount         Int                  @default(0)
  mark               Int?
  task               Task                 @relation(fields: [taskId], references: [id])
  taskId             Int
  student            User                 @relation(fields: [studentId], references: [id])
  studentId          String
  TaskAnswerComments TaskAnswerComments[]

  @@index([taskId])
  @@index([studentId])
}

model TaskAnswerComments {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  text         String
  taskAnswer   TaskAnswer @relation(fields: [taskAnswerId], references: [id])
  taskAnswerId Int
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String

  @@index([taskAnswerId])
  @@index([authorId])
}

model Test {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  name        String
  description String
  deadline    DateTime
  subject     Subject        @relation(fields: [subjectId], references: [id])
  subjectId   Int
  class       Class          @relation(fields: [classId], references: [id])
  classId     Int
  questions   TestQuestion[]

  @@index([subjectId])
  @@index([classId])
}

model TestQuestion {
  id           Int          @id @default(autoincrement())
  text         String
  file         String?
  testAnswers  TestAnswer[]
  manualAnswer String?
  test         Test         @relation(fields: [testId], references: [id])
  testId       Int

  @@index([testId])
}

model TestAnswer {
  id         Int          @id @default(autoincrement())
  text       String
  file       String?
  isCorrect  Boolean
  question   TestQuestion @relation(fields: [questionId], references: [id])
  questionId Int

  @@index([questionId])
}
